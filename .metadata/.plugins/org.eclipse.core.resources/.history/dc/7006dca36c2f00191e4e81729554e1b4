package textUmbruch;

import java.util.ArrayList;
import java.util.List;

public class TextWrapper {
	private List<String> ausgabeZeilen = new ArrayList<String>();
	
	private void addAusgabeZeile(String zeile) {
		this.ausgabeZeilen.add(zeile);
	}
	
	private String arbeitszeile = "";
	
	private void addWortZuArbeitszeile(String wort) {
		this.arbeitszeile.concat(wort);
	}
	
	private String getArbeitszeile() {
		return arbeitszeile;
	}
	
	private void clearArbeitszeile() {
		arbeitszeile = "";
	}
	
	public String umbrechen(String text, int maxZeilenlänge) {
		List<String> ausgabeZeilen = zeilenErstellen(text, maxZeilenlänge);
		
		return ausgabeTextErstellen(ausgabeZeilen);
	}

	private String ausgabeTextErstellen(List<String> ausgabeZeilen) {
		String ausgabeString = "";
		
		for(int lineIndex = 0; lineIndex < ausgabeZeilen.size(); lineIndex++) {
			ausgabeString = ausgabeString.concat(ausgabeZeilen.get(lineIndex));
			if (lineIndex < ausgabeZeilen.size() - 1) ausgabeString = ausgabeString.concat("\r\n");
		}
		return ausgabeString;
	}

	private List<String> zeilenErstellen(String text, int maxZeilenlänge) {
		String[] textGetrennt = inputAufbereiten(text);
		String naechsteZeile = "";
		
		for (int wordIndex = 0; wordIndex < textGetrennt.length; wordIndex++) {
			String naechstesWort = textGetrennt[wordIndex];
			
			addWortZuArbeitszeile(naechstesWortErmitteln(maxZeilenlänge, ausgabeZeilen, naechsteZeile, naechstesWort));
		}
		
		addAusgabeZeile(arbeitszeile);
		
		return ausgabeZeilen;
	}

	private String naechstesWortErmitteln(int maxZeilenlänge, List<String> ausgabeZeilen, String naechsteZeile,
			String naechstesWort) {
		String naechstesAusgabeWort = "";
		if(passtWortInZeile(naechstesWort, naechsteZeile, maxZeilenlänge)) {
			naechstesAusgabeWort = naechstesWort + " ";
		} else {
			addAusgabeZeile(arbeitszeile);
			naechstesAusgabeWort = naechsteZeileBeginnen(maxZeilenlänge, ausgabeZeilen, naechstesWort);
		}
		return naechstesAusgabeWort;
	}

	private String naechsteZeileBeginnen(int maxZeilenlänge, List<String> ausgabeZeilen, String naechstesWort) {
		if (naechstesWort.length() > maxZeilenlänge) {
			addAusgabeZeile(naechstesWort.substring(0, maxZeilenlänge));
			return naechstesWort.trim().substring(maxZeilenlänge) + " ";
		} else {
			return naechstesWort + " ";
		}
	}

	private boolean passtWortInZeile(String naechstesWort, String naechsteZeile, int maxZeilenlänge) {
		return (naechsteZeile.length() + naechstesWort.length() + 1 <= maxZeilenlänge);	
	}

	private String[] inputAufbereiten(String text) {
		return text.split(" ");
	}

	
}
