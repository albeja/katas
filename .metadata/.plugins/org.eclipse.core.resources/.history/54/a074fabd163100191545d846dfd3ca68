package tictactoe;

import java.util.Scanner;

public class SpieleEngine {
	private Spielbrett brett = new Spielbrett();
	private Scanner scanner = new Scanner(System.in);
	private int spieler = 1;
	
	public void spielbrettVisualisieren() {
		naechstenSpielzugBeginnen();
	}

	private void naechstenSpielzugBeginnen() {
		konsolenAusgabe();
		inputVerarbeiten();
	}

	private void inputVerarbeiten() {
		System.out.print("Kommando: ");
		String kommando = scanner.next();
		try {
			eingabeVerarbeiten(kommando, this.spieler);
		} catch(Exception e){
			System.out.println(e.getMessage());
			inputVerarbeiten();
		}
	}
	
	
	
	private void spielstandEvaluieren() {
		if (unentschieden()) {
			System.out.println("Unentschieden. Entweder neu oder ende wählen.");
			naechstenSpielzugBeginnen();
		} else if (spielerEinsGewinnt()) {
			System.out.println("Spieler 1 gewinnt. Entweder neu oder ende wählen.");
			naechstenSpielzugBeginnen();
		} else if (spielerZweiGewinnt()) {
			System.out.println("Spieler 2 gewinnt. Entweder neu oder ende wählen.");
			naechstenSpielzugBeginnen();
		} else {
			naechstenSpielzugBeginnen();
		}
	}

	private boolean unentschieden() {
		return brett.isJedesFeldBelegt();
	}

	private boolean spielerZweiGewinnt() {
		return brett.hasZahlEineReihe(2);
	}

	private boolean spielerEinsGewinnt() {
		return brett.hasZahlEineReihe(1);
	}

	private void konsolenAusgabe() {
		int[][] spielstand = brett.ausgabe();
		überschriftAusgeben();
		
		for(int zeile=0; zeile < spielstand.length; zeile++) {
			System.out.print(zeile + ": ");
			zeileAusgeben(spielstand[zeile]);
		};
	}

	private void eingabeVerarbeiten(String kommando, int spieler) throws Exception {
		//TODO: Spiel geht nach Zug weiter
		switch (kommando) {
			case "A0": spielzugDurchführen(spieler); break;
			case "B0": brett.zug(1, spieler); spielerWechsel(); spielstandEvaluieren(); break;
			case "C0": brett.zug(2, spieler); spielerWechsel(); spielstandEvaluieren(); break;
	        case "A1": brett.zug(3, spieler); spielerWechsel(); spielstandEvaluieren(); break;
	        case "B1": brett.zug(4, spieler); spielerWechsel(); spielstandEvaluieren(); break;
	        case "C1": brett.zug(5, spieler); spielerWechsel(); spielstandEvaluieren(); break;
	        case "A2": brett.zug(6, spieler); spielerWechsel(); spielstandEvaluieren(); break;
	        case "B2": brett.zug(7, spieler); spielerWechsel(); spielstandEvaluieren(); break;
	        case "C2": brett.zug(8, spieler); spielerWechsel(); spielstandEvaluieren(); break;
	        case "neu": brett = new Spielbrett(); this.naechstenSpielzugBeginnen(); break;
	        case "ende": break;
	        default:
	        	throw new Exception("Ungültiger Befehl.");
		}	
	}

	private void spielzugDurchführen(int spieler) throws Exception {
		brett.zug(0, spieler); spielerWechsel(); spielstandEvaluieren();
	}

	private void spielerWechsel() {
		if (spieler == 1) spieler ++;
		else spieler--;
	}

	private void überschriftAusgeben() {
		System.out.println("   A | B | C");
		zeilenTrennen();
	}

	private void zeilenTrennen() {
		System.out.println("-------------");
	}

	private void zeileAusgeben(int[] zeile) {
		for(int spalte = 0; spalte < zeile.length; spalte++) {
			if (zeile[spalte] == 1) {
				System.out.print("X");	
			} else if (zeile[spalte] == 2) {
				System.out.print("O");	
			} else {
				System.out.print(" ");
			}
			zeichenTrennen(spalte);
		}
	}
	
	private void zeichenTrennen(int spalte) {
		if (spalte == 0 || spalte == 1) {
			System.out.print(" | ");
		} else {
			System.out.print("\r\n");
			zeilenTrennen();
		}
	}
	
	public static void main(String [] args) {
		new SpieleEngine().spielbrettVisualisieren();
	}
}
